{"version":3,"sources":["screens/HomeScreen.js","screens/BranchesScreen.js","App.js","reportWebVitals.js","index.js"],"names":["HomeScreen","useState","branchs","setBranchs","loadingBranchs","setloadingBranchs","loadingselectedbranchData","setLoadingSelectedbranchData","selectedbranchData","setSelectedbranchData","getBranches","a","axios","get","b","console","log","getSelectedBranch","branchId","useEffect","className","DropdownButton","id","drop","variant","onClick","event","title","map","branch","Dropdown","Item","_id","eventKey","name","Divider","Table","responsive","day","index","date","in","out","total_in","BranchesScreen","newbranch","setNewBranch","addNewBranch","post","Card","Form","onSubmit","Group","controlId","Label","Control","value","type","placeholder","onChange","e","target","required","Button","App","NavItem","to","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e986687f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { DropdownButton, Dropdown, Table } from \"react-bootstrap\";\r\nimport { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nfunction HomeScreen() {\r\n  const [branchs, setBranchs] = useState([]);\r\n  const [loadingBranchs, setloadingBranchs] = useState(false);\r\n  const [loadingselectedbranchData, setLoadingSelectedbranchData] = useState(false);\r\n  const [selectedbranchData, setSelectedbranchData] = useState([]);\r\n\r\n\r\n\r\n  const getBranches = async () => {\r\n    try {\r\n      setloadingBranchs(true);\r\n      const b = await axios.get('/branches');\r\n      console.log(b);\r\n      setBranchs(b['data']);\r\n      setloadingBranchs(false);\r\n\r\n    } catch (e) {\r\n      console.log('error');\r\n      console.log(e);\r\n\r\n      setloadingBranchs(false);\r\n    }\r\n\r\n  }\r\n\r\n  const getSelectedBranch = async (branchId) => {\r\n    try {\r\n      setLoadingSelectedbranchData(true);\r\n      const b = await axios.get(`/branches/${branchId}`);\r\n      console.log(b);\r\n      setSelectedbranchData(b['data']);\r\n      setLoadingSelectedbranchData(false);\r\n\r\n    } catch (e) {\r\n      console.log(e);\r\n\r\n      setLoadingSelectedbranchData(false);\r\n    }\r\n\r\n  }\r\n  useEffect(() => {\r\n\r\n\r\n    getBranches();\r\n\r\n  }, []);\r\n  return (\r\n    <>\r\n      <div className=''>\r\n        {loadingBranchs ? 'loading...' : (\r\n          <DropdownButton\r\n            className='branch'\r\n            key='left'\r\n            id='dropdown-button-drop-left'\r\n            drop='left'\r\n            variant=\"secondary\"\r\n            onClick={(event => {\r\n\r\n            })}\r\n            title='Branch'>\r\n            {\r\n              branchs?.map((branch) => {\r\n\r\n\r\n                return <Dropdown.Item onClick={\r\n                  event => getSelectedBranch(branch._id)} eventKey={branch}>{branch.name}</Dropdown.Item>;\r\n\r\n\r\n              })\r\n\r\n            }\r\n\r\n\r\n            <Dropdown.Divider />\r\n\r\n\r\n          </DropdownButton>)}\r\n      </div>\r\n      <div>\r\n        {\r\n          loadingselectedbranchData ? 'loading...' : (<Table responsive>\r\n            <thead>\r\n              <tr>\r\n                <th>#</th>\r\n                <th>Date</th>\r\n                <th>In</th>\r\n                <th>Out</th>\r\n                <th>Total In</th>\r\n\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {selectedbranchData?.map((day, index) => (\r\n                <tr>\r\n                  <td key={index}>{index}</td>\r\n                  <td key={index}>{day.date} </td>\r\n                  <td key={index}>{day.in} </td>\r\n                  <td key={index}>{day.out} </td>\r\n                  <td key={index}>{day.total_in}</td>\r\n                </tr>\r\n              ))}\r\n\r\n\r\n            </tbody>\r\n          </Table>)}\r\n\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default HomeScreen;","import React from 'react';\r\nimport { Table, Form, Button, Card } from \"react-bootstrap\";\r\nimport { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction BranchesScreen() {\r\n  const [branchs, setBranchs] = useState([]);\r\n  const [loadingBranchs, setloadingBranchs] = useState(false);\r\n  const [newbranch, setNewBranch] = useState('');\r\n\r\n  const addNewBranch = async () => {\r\n    await axios.post('/branch', { branch: newbranch });\r\n\r\n  }\r\n\r\n  const getBranches = async () => {\r\n    try {\r\n      setloadingBranchs(true);\r\n      const b = await axios.get('/branches');\r\n      console.log(b);\r\n      setBranchs(b['data']);\r\n      setloadingBranchs(false);\r\n\r\n    } catch (e) {\r\n      console.log('error');\r\n      console.log(e);\r\n\r\n      setloadingBranchs(false);\r\n    }\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n\r\n    getBranches();\r\n\r\n  }, []);\r\n  return (\r\n    <>\r\n      <div>\r\n        {\r\n          loadingBranchs ? 'loading...' : (<Table responsive>\r\n            <thead>\r\n              <tr>\r\n                <th>#</th>\r\n                <th>ID</th>\r\n                <th>Branch Name</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {branchs?.map((branch, index) => (\r\n                <tr>\r\n                  <td key={index}>{index}</td>\r\n                  <td key={index}>{branch._id} </td>\r\n                  <td key={index}>{branch.name} </td>\r\n                </tr>\r\n              ))}\r\n\r\n\r\n            </tbody>\r\n          </Table>)}\r\n\r\n      </div>\r\n      <Card className='card'>\r\n        <Form onSubmit={addNewBranch}>\r\n          <Form.Group controlId=\"formGroupFullName\">\r\n            <Form.Label>New Branch Name</Form.Label>\r\n            <Form.Control value={newbranch} type=\"text\" placeholder=\"Enter new branch name\"\r\n              onChange={e => setNewBranch(e.target.value)} required\r\n            />\r\n          </Form.Group>\r\n          <Button type='submit' variant='secondary' className='newBranchButton'>Add New Branch</Button>\r\n        </Form>\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default BranchesScreen;","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport HomeScreen from './screens/HomeScreen';\nimport { BrowserRouter, Route } from 'react-router-dom/cjs/react-router-dom.min';\nimport BranchesScreen from './screens/BranchesScreen';\nimport { NavItem } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nfunction App() {\n\n  return (\n    <BrowserRouter>\n      <div>\n        <div className='header'>\n          <NavItem>\n            <Link to='/'>Home</Link>\n          </NavItem>\n          <NavItem>\n            <Link to='/allbranches'>Branches</Link>\n          </NavItem>\n        </div>\n        <main>\n          <Route path='/allbranches' component={BranchesScreen}></Route>\n          <Route path='/' component={HomeScreen} exact></Route>\n        </main>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}