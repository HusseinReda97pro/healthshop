{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","branchs","setBranchs","loadingBranchs","setloadingBranchs","loadingselectedbranchData","setLoadingSelectedbranchData","selectedbranchData","setSelectedbranchData","getBranches","a","axios","get","b","console","log","getSelectedBranch","branchId","useEffect","className","DropdownButton","id","drop","variant","onClick","event","title","map","branch","Dropdown","Item","_id","eventKey","name","Divider","Table","responsive","day","index","date","in","out","total_in","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sTA2HeA,MAtHf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,OAE+BF,oBAAS,GAFxC,mBAENG,EAFM,KAEUC,EAFV,OAGqDJ,oBAAS,GAH9D,mBAGNK,EAHM,KAGqBC,EAHrB,OAIuCN,mBAAS,IAJhD,mBAINO,EAJM,KAIcC,EAJd,KAaPC,EAAW,uCAAG,4BAAAC,EAAA,sEAEhBN,GAAkB,GAFF,SAGAO,IAAMC,IAAI,aAHV,OAGVC,EAHU,OAIhBC,QAAQC,IAAIF,GACZX,EAAWW,EAAC,MACZT,GAAkB,GANF,kDAShBU,QAAQC,IAAI,SACZD,QAAQC,IAAR,MAEAX,GAAkB,GAZF,0DAAH,qDAiBXY,EAAiB,uCAAG,WAAOC,GAAP,eAAAP,EAAA,sEAEtBJ,GAA6B,GAFP,SAGNK,IAAMC,IAAN,oBAAuBK,IAHjB,OAGhBJ,EAHgB,OAItBC,QAAQC,IAAIF,GACZL,EAAsBK,EAAC,MACvBP,GAA6B,GANP,kDAStBQ,QAAQC,IAAR,MAEAT,GAA6B,GAXP,0DAAH,sDAqBvB,OANAY,qBAAU,WAGRT,MAEC,IAED,gCACE,qBAAKU,UAAU,WAEf,qBAAKA,UAAU,GAAf,SACGhB,EAAiB,aAChB,eAACiB,EAAA,EAAD,CACED,UAAU,SAEVE,GAAG,4BACHC,KAAK,OACLC,QAAQ,YACRC,QAAU,SAAAC,KAGVC,MAAM,SATR,iBAWIzB,QAXJ,IAWIA,OAXJ,EAWIA,EAAS0B,KAAI,SAACC,GAGZ,OAAO,cAACC,EAAA,EAASC,KAAV,CAAeN,QACpB,SAAAC,GAAK,OAAIT,EAAkBY,EAAOG,MAAMC,SAAUJ,EAD7C,SACsDA,EAAOK,UAQxE,cAACJ,EAAA,EAASK,QAAV,MArBI,UA0BV,8BAEI7B,EAA4B,aAAgB,eAAC8B,EAAA,EAAD,CAAOC,YAAU,EAAjB,UAC1C,gCACE,+BACE,mCACA,sCACA,oCACA,qCACA,+CAIJ,uCACG7B,QADH,IACGA,OADH,EACGA,EAAoBoB,KAAI,SAACU,EAAKC,GAAN,OACvB,+BACE,6BAAiBA,GAARA,GACT,+BAAiBD,EAAIE,KAArB,MAASD,GACT,+BAAiBD,EAAIG,GAArB,MAASF,GACT,+BAAiBD,EAAII,IAArB,MAASH,GACT,6BAAiBD,EAAIK,UAAZJ,oBClGZK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4c294357.chunk.js","sourcesContent":["import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { DropdownButton, Dropdown, Table } from \"react-bootstrap\";\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nfunction App() {\n  const [branchs, setBranchs] = useState([]);\n  const [loadingBranchs, setloadingBranchs] = useState(false);\n  const [loadingselectedbranchData, setLoadingSelectedbranchData] = useState(false);\n  const [selectedbranchData, setSelectedbranchData] = useState([]);\n\n  const branchData = [{\n    'date': '4-1-2021',\n    'in': 6,\n    'out': 4,\n    'total_in': 2\n  }];\n\n  const getBranches = async () => {\n    try {\n      setloadingBranchs(true);\n      const b = await axios.get('/branches');\n      console.log(b);\n      setBranchs(b['data']);\n      setloadingBranchs(false);\n\n    } catch (e) {\n      console.log('error');\n      console.log(e);\n\n      setloadingBranchs(false);\n    }\n\n  }\n\n  const getSelectedBranch = async (branchId) => {\n    try {\n      setLoadingSelectedbranchData(true);\n      const b = await axios.get(`/branches/${branchId}`);\n      console.log(b);\n      setSelectedbranchData(b['data']);\n      setLoadingSelectedbranchData(false);\n\n    } catch (e) {\n      console.log(e);\n\n      setLoadingSelectedbranchData(false);\n    }\n\n  }\n  useEffect(() => {\n\n\n    getBranches();\n\n  }, []);\n  return (\n    <div>\n      <div className='header'>\n      </div>\n      <div className=''>\n        {loadingBranchs ? 'loading...' : (\n          <DropdownButton\n            className='branch'\n            key='left'\n            id='dropdown-button-drop-left'\n            drop='left'\n            variant=\"secondary\"\n            onClick={(event => {\n\n            })}\n            title='Branch'>\n            {\n              branchs?.map((branch) => {\n\n\n                return <Dropdown.Item onClick={\n                  event => getSelectedBranch(branch._id)} eventKey={branch}>{branch.name}</Dropdown.Item>;\n\n\n              })\n\n            }\n\n\n            <Dropdown.Divider />\n\n\n          </DropdownButton>)}\n      </div>\n      <div>\n        {\n          loadingselectedbranchData ? 'loading...' : (<Table responsive>\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>Date</th>\n                <th>In</th>\n                <th>Out</th>\n                <th>Total In</th>\n\n              </tr>\n            </thead>\n            <tbody>\n              {selectedbranchData?.map((day, index) => (\n                <tr>\n                  <td key={index}>{index}</td>\n                  <td key={index}>{day.date} </td>\n                  <td key={index}>{day.in} </td>\n                  <td key={index}>{day.out} </td>\n                  <td key={index}>{day.total_in}</td>\n                </tr>\n              ))}\n\n\n            </tbody>\n          </Table>)}\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}